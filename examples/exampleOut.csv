Name,Host,IP,Path,Severity,Confidence,Issue Background,Remediation Background,Vulnerability Classification,Issue Details
Cleartext submission of password,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php,High,Certain,"Some applications transmit passwords over unencrypted connections| making them vulnerable to interception. To exploit this vulnerability| an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi| or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.
Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information| exposing passwords puts users who have re-used their password elsewhere at risk.","Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/319.html"">CWE-319: Cleartext Transmission of Sensitive Information</a></li>","The page contains a form with the following action URL"","" which is submitted over clear-text HTTP:<ul><li>http://s96141-102131-t7y.croto.hack.me/index.php</li></ul>The form contains the following password field:<ul><li>password</li></ul>"
Cleartext submission of password,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/,High,Certain,"Some applications transmit passwords over unencrypted connections| making them vulnerable to interception. To exploit this vulnerability| an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi| or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.
Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information| exposing passwords puts users who have re-used their password elsewhere at risk.","Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/319.html"">CWE-319: Cleartext Transmission of Sensitive Information</a></li>","The page contains a form with the following action URL"","" which is submitted over clear-text HTTP:<ul><li>http://s96141-102131-t7y.croto.hack.me/</li></ul>The form contains the following password field:<ul><li>password</li></ul>"
SQL injection,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [username parameter],High,Tentative,"SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.
A wide range of damaging attacks can often be delivered via SQL injection| including reading or modifying critical application data| interfering with application logic| escalating privileges within the database and taking control of the database server. ","The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>","<li><a href=""https://cwe.mitre.org/data/definitions/89.html"">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/94.html"">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li>","The <b>username</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the username parameter"","" and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message"","" and the application's handling of other input"","" to confirm whether a vulnerability is present."
Cross-site scripting (reflected),http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [username parameter],High,Certain,"Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that| if issued by another application user| will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.
The attacker-supplied code can perform a wide variety of actions| such as stealing the victim's session token or login credentials| performing arbitrary actions on the victim's behalf| and logging their keystrokes.
Users can be induced to issue the attacker's crafted request in various ways. For example| the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring| for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).
The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application| the kinds of data and functionality that it contains| and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content| with no authentication or access control functionality| then a cross-site scripting flaw may be considered low risk. However| if the same application resides on a domain that can access cookies for other more security-critical applications| then the vulnerability could be used to attack those other applications| and so may be considered high risk. Similarly| if the organization that owns the application is a likely target for phishing attacks| then the vulnerability could be leveraged to lend credibility to such attacks| by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application| such as those providing online banking functionality| cross-site scripting should always be considered high risk. ","In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; "" ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/79.html"">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/80.html"">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li><li><a href=""https://cwe.mitre.org/data/definitions/159.html"">CWE-159: Failure to Sanitize Special Element</a></li>","The value of the <b>username</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>edlil&lt;script&gt;alert(1)&lt;/script&gt;rwef6kpsx8n</b> was submitted in the username parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method"","" however it was possible to convert the request to use the GET method"","" to enable easier demonstration and delivery of the attack."
SQL injection,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [password parameter],High,Tentative,"SQL injection vulnerabilities arise when user-controllable data is incorporated into database SQL queries in an unsafe manner. An attacker can supply crafted input to break out of the data context in which their input appears and interfere with the structure of the surrounding query.
A wide range of damaging attacks can often be delivered via SQL injection| including reading or modifying critical application data| interfering with application logic| escalating privileges within the database and taking control of the database server. ","The most effective way to prevent SQL injection attacks is to use parameterized queries (also known as prepared statements) for all database access. This method uses two steps to incorporate potentially tainted data into SQL queries: first, the application specifies the structure of the query, leaving placeholders for each item of user input; second, the application specifies the contents of each placeholder. Because the structure of the query has already been defined in the first step, it is not possible for malformed data in the second step to interfere with the query structure. You should review the documentation for your database and application platform to determine the appropriate APIs which you can use to perform parameterized queries. It is strongly recommended that you parameterize <i>every</i> variable data item that is incorporated into database queries, even if it is not obviously tainted, to prevent oversights occurring and avoid vulnerabilities being introduced by changes elsewhere within the code base of the application.</p>
You should be aware that some commonly employed and recommended mitigations for SQL injection vulnerabilities are not always effective: </p>
<ul>
  <li>One common defense is to double up any single quotation marks appearing within user input before incorporating that input into a SQL query. This defense is designed to prevent malformed data from terminating the string into which it is inserted. However, if the data being incorporated into queries is numeric, then the defense may fail, because numeric data may not be encapsulated within quotes, in which case only a space is required to break out of the data context and interfere with the query. Further, in second-order SQL injection attacks, data that has been safely escaped when initially inserted into the database is subsequently read from the database and then passed back to it again. Quotation marks that have been doubled up initially will return to their original form when the data is reused, allowing the defense to be bypassed.</li>
  <li>Another often cited defense is to use stored procedures for database access. While stored procedures can provide security benefits, they are not guaranteed to prevent SQL injection attacks. The same kinds of vulnerabilities that arise within standard dynamic SQL queries can arise if any SQL is dynamically constructed within stored procedures. Further, even if the procedure is sound, SQL injection can arise if the procedure is invoked in an unsafe manner using user-controllable data.</li>
</ul>","<li><a href=""https://cwe.mitre.org/data/definitions/89.html"">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/94.html"">CWE-94: Improper Control of Generation of Code ('Code Injection')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li>","The <b>password</b> parameter appears to be vulnerable to SQL injection attacks. A single quote was submitted in the password parameter"","" and a general error message was returned. Two single quotes were then submitted and the error message disappeared. You should review the contents of the error message"","" and the application's handling of other input"","" to confirm whether a vulnerability is present."
Cross-site scripting (reflected),http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [password parameter],High,Certain,"Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that| if issued by another application user| will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.
The attacker-supplied code can perform a wide variety of actions| such as stealing the victim's session token or login credentials| performing arbitrary actions on the victim's behalf| and logging their keystrokes.
Users can be induced to issue the attacker's crafted request in various ways. For example| the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring| for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).
The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application| the kinds of data and functionality that it contains| and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content| with no authentication or access control functionality| then a cross-site scripting flaw may be considered low risk. However| if the same application resides on a domain that can access cookies for other more security-critical applications| then the vulnerability could be used to attack those other applications| and so may be considered high risk. Similarly| if the organization that owns the application is a likely target for phishing attacks| then the vulnerability could be leveraged to lend credibility to such attacks| by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application| such as those providing online banking functionality| cross-site scripting should always be considered high risk. ","In most situations where user-controllable data is copied into application responses, cross-site scripting 
  attacks can be prevented using two layers of defenses:</p>
<ul>
  <li>Input should be validated as strictly as possible on arrival, given the kind of content that 
it is expected to contain. For example, personal names should consist of alphabetical 
and a small range of typographical characters, and be relatively short; a year of birth 
should consist of exactly four numerals; email addresses should match a well-defined 
regular expression. Input which fails the validation should be rejected, not sanitized.</li>
<li>User input should be HTML-encoded at any point where it is copied into 
application responses. All HTML metacharacters, including &lt; &gt; "" ' and =, should be 
replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul>
In cases where the application's functionality allows users to author content using 
  a restricted subset of HTML tags and attributes (for example, blog comments which 
  allow limited formatting and linking), it is necessary to parse the supplied HTML to 
  validate that it does not use any dangerous syntax; this is a non-trivial task.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/79.html"">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a></li><li><a href=""https://cwe.mitre.org/data/definitions/80.html"">CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li><li><a href=""https://cwe.mitre.org/data/definitions/159.html"">CWE-159: Failure to Sanitize Special Element</a></li>","The value of the <b>password</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>x94ft&lt;script&gt;alert(1)&lt;/script&gt;jmitmwur1ad</b> was submitted in the password parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.<br><br>The original request used the POST method"","" however it was possible to convert the request to use the GET method"","" to enable easier demonstration and delivery of the attack."
Unencrypted communications,http://detectportal.firefox.com,104.104.244.216,/,Low,Certain,"The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore| an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users| and to inject adverts and malicious JavaScript. Due to these concerns| web browser vendors are planning to visually flag unencrypted connections as hazardous.

To exploit this vulnerability| an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi| or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.

Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers| because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.",Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>,"<li><a href=""https://cwe.mitre.org/data/definitions/326.html"">CWE-326: Inadequate Encryption Strength</a></li>",BLANK
Unencrypted communications,http://acer17win10.msn.com,13.82.28.61,/,Low,Certain,"The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore| an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users| and to inject adverts and malicious JavaScript. Due to these concerns| web browser vendors are planning to visually flag unencrypted connections as hazardous.

To exploit this vulnerability| an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi| or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.

Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers| because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.",Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>,"<li><a href=""https://cwe.mitre.org/data/definitions/326.html"">CWE-326: Inadequate Encryption Strength</a></li>",BLANK
Unencrypted communications,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/,Low,Certain,"The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore| an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users| and to inject adverts and malicious JavaScript. Due to these concerns| web browser vendors are planning to visually flag unencrypted connections as hazardous.

To exploit this vulnerability| an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi| or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.

Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers| because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.",Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>,"<li><a href=""https://cwe.mitre.org/data/definitions/326.html"">CWE-326: Inadequate Encryption Strength</a></li>",BLANK
Password field with autocomplete enabled,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php,Low,Certain,"Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled| then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.
The stored credentials can be captured by an attacker who gains control over the user's computer. Further| an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. ","To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=""off""</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>
Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/200.html"">CWE-200: Information Exposure</a></li>",The page contains a form with the following action URL:<ul><li>http://s96141-102131-t7y.croto.hack.me/index.php</li></ul>The form contains the following password field with autocomplete enabled:<ul><li>password</li></ul>
Password field with autocomplete enabled,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/,Low,Certain,"Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled| then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.
The stored credentials can be captured by an attacker who gains control over the user's computer. Further| an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. ","To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=""off""</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p>
Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/200.html"">CWE-200: Information Exposure</a></li>",The page contains a form with the following action URL:<ul><li>http://s96141-102131-t7y.croto.hack.me/</li></ul>The form contains the following password field with autocomplete enabled:<ul><li>password</li></ul>
Cross-origin resource sharing,http://www.msn.com,204.79.197.203,/,Information,Certain,"An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.If another domain is allowed by the policy| then that domain can potentially attack users of the application. If a user is logged in to the application| and visits a domain allowed by the policy| then any malicious content running on that domain can potentially retrieve content from the application| and sometimes carry out actions within the security context of the logged in user.
Even if an allowed domain is not overtly malicious in itself| security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.",Any inappropriate domains should be removed from the CORS policy.</p>,"<li><a href=""https://cwe.mitre.org/data/definitions/942.html"">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>","The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls"","" this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response"","" reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
HTML does not specify charset,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php,Information,Certain,"If a  response states that it contains HTML content but does not specify a character set| then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8| the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results| and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.
In most cases| the absence of a charset directive does not constitute a security flaw| particularly if the response contains static content. You should review the contents of affected responses| and the context in which they appear| to determine whether any vulnerability exists. ","For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>","<li><a href=""https://cwe.mitre.org/data/definitions/16.html"">CWE-16: Configuration</a></li><li><a href=""https://cwe.mitre.org/data/definitions/436.html"">CWE-436: Interpretation Conflict</a></li>",BLANK
Frameable response (potential Clickjacking),http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/favicon.ico,Information,Firm,"If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header| it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack| in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes| the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery| and may result in unauthorized actions.
Note that some applications attempt to prevent these attacks from within the HTML page itself| using ""framebusting"" code. However| this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.
You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. ","To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","<li><a href=""https://cwe.mitre.org/data/definitions/693.html"">CWE-693: Protection Mechanism Failure</a></li>",BLANK
HTML does not specify charset,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/,Information,Certain,"If a  response states that it contains HTML content but does not specify a character set| then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8| the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results| and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.
In most cases| the absence of a charset directive does not constitute a security flaw| particularly if the response contains static content. You should review the contents of affected responses| and the context in which they appear| to determine whether any vulnerability exists. ","For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.
</p>","<li><a href=""https://cwe.mitre.org/data/definitions/16.html"">CWE-16: Configuration</a></li><li><a href=""https://cwe.mitre.org/data/definitions/436.html"">CWE-436: Interpretation Conflict</a></li>",BLANK
Cross-site request forgery,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/,Information,Tentative,"Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin| it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF| the following conditions must hold:
<ul>
<li>The request can be issued cross-domain| for example using an HTML form. If the request contains non-standard headers or body content| then it may only be issuable from a page that originated on the same domain.</li>
<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request| then it may not be vulnerable.</li>
<li>The request performs some privileged action within the application| which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict| then it is not vulnerable.</li></ul>","The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>
An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>","<li><a href=""https://cwe.mitre.org/data/definitions/352.html"">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>","The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against unauthenticated functionality. This is unlikely to constitute a security vulnerability in its own right"","" however it may facilitate exploitation of other vulnerabilities affecting application users."
Input returned in response (reflected),http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [username parameter],Information,Certain,Reflection of input arises when data is copied from a request and echoed into the application's immediate response.Input being returned in application responses is not a vulnerability in its own right. However| it is a prerequisite for many client-side vulnerabilities| including cross-site scripting| open redirection| content spoofing| and response header injection. Additionally| some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example| due to a web application firewall)| it might be worth subjecting instances of it to focused manual testing. ,BLANK,"<li><a href=""https://cwe.mitre.org/data/definitions/20.html"">CWE-20: Improper Input Validation</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li>",The value of the <b>username</b> request parameter is copied into the application's response.
Input returned in response (reflected),http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php [password parameter],Information,Certain,Reflection of input arises when data is copied from a request and echoed into the application's immediate response.Input being returned in application responses is not a vulnerability in its own right. However| it is a prerequisite for many client-side vulnerabilities| including cross-site scripting| open redirection| content spoofing| and response header injection. Additionally| some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example| due to a web application firewall)| it might be worth subjecting instances of it to focused manual testing. ,BLANK,"<li><a href=""https://cwe.mitre.org/data/definitions/20.html"">CWE-20: Improper Input Validation</a></li><li><a href=""https://cwe.mitre.org/data/definitions/116.html"">CWE-116: Improper Encoding or Escaping of Output</a></li>",The value of the <b>password</b> request parameter is copied into the application's response.
Cross-site request forgery,http://s96141-102131-t7y.croto.hack.me,74.50.111.247,/index.php,Information,Tentative,"Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin| it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF| the following conditions must hold:
<ul>
<li>The request can be issued cross-domain| for example using an HTML form. If the request contains non-standard headers or body content| then it may only be issuable from a page that originated on the same domain.</li>
<li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request| then it may not be vulnerable.</li>
<li>The request performs some privileged action within the application| which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict| then it is not vulnerable.</li></ul>","The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p>
An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>","<li><a href=""https://cwe.mitre.org/data/definitions/352.html"">CWE-352: Cross-Site Request Forgery (CSRF)</a></li>","The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against unauthenticated functionality. This is unlikely to constitute a security vulnerability in its own right"","" however it may facilitate exploitation of other vulnerabilities affecting application users."
